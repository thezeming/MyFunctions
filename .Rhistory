?lm
?NeweyWest
library(lmtest)
library(sandwich)
?NeweyWest
usethis
library(usethis)
?use_pipe()
usethis::use_pipe()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethat::use_vignette("introduction")
devtools::use_vignette("introduction")
install.packages(usethat)
install.packages('usethat')
usethat::use_vignette("introduction")
devtools::install()
?sandwish::NeweyWest
?sandwich::NeweyWest
?sandwich::coeftest
?lmtest::coeftest
devtools::install()
devtools::install()
devtools::install()
usethis::use_pipe()
devtools::document()
devtools::install()
devtools::install_github("SOTON2947/MyFunctions")
devtools::install_github("SOTON2947/MyFunctions")
install.packages(Rtools)
install.packages('Rtools')
?devtools::install_github
devtools::install_github("SOTON2947/MyFunctions"
,ref="master"
,auth_token = "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"
)
?mean
# update documentation
devtools::document()
# install package
devtools::install()
library(MyFunctions)
?MySQL.SELECT.WHERE
?mean
?MySQL.SELECT.WHERE
# update documentation
devtools::document()
# install and attach package
devtools::install()
library(MyFunctions)
?OLS.REG
library(MyFunctions)
?OLS.REG
a <- matrix(rnorm(1000), ncol = 5)
a %>% head
OLS.REG(a)
OLS.REG(a, star_paren = F)
?yearmon
?xts::yearmon
?zoo::yearmon
a <- zoo::yearmon(Sys.time())
a <- zoo::yearmon(Sys.now())
Sys.time()
a <- zoo::yearmon(Sys.time())
Sys.time()
Sys.time() %>% class
class(Sys.time()0
class(Sys.time())
a <- zoo::as.yearmon(Sys.time())
a
a+1
a+.1
library(lubridate)
a %m+% month(1)
as.date(a) %m+% month(1)
as.Date(a) %m+% month(1)
zoo::as.Date(a) %m+% month(1)
as.Date("2016-01-01") + 0:4
as.Date("2016-01-01") + 1:4
as.Date("2005-1-1") + seq(0,90,30)
seq(0,90,30)
a
as.Date(a)
?as.Date
ls()
search()
a
mode(a)
class(a)
a
a+1
a+1/12
a+11/12
class(as.Date("2016-01-01"))
?yearm
?yearmon
?Date
a <- a + 0:4
a
b <- xts::xts(c(0:4),order.by = a)
b
b %>% index
index(b)
xts::index(b)
zoo::index(b)
class(zoo::index(b)))
class(zoo::index(b))
xts::merg.xts(b,b)
xts::merge.xts(b,b)
# update documentation
devtools::document()
# install and attach package
devtools::install()
search()
?EnvStats::kurtosis
# install and attach package
devtools::install()
# update documentation
devtools::document()
# update documentation
devtools::document()
# install and attach package
devtools::install()
library(MyFunctions)
# update documentation
devtools::document()
# install and attach package
devtools::install()
library(MyFunctions)
?CRSP.MERGE()
# update documentation
devtools::document()
# update documentation
devtools::document()
# update documentation
devtools::document()
# update documentation
devtools::document()
# update documentation
devtools::document()
# The packages required for writing your own package are "devtools" and "roxygen2"
# update documentation
devtools::document()
# install and attach package
devtools::install()
# update documentation
devtools::document()
devtools::install_github("thezeming/MyFunctions",
ref="master")
devtools::install_github("thezeming/MyFunctions",
ref="master")
library(MyFunctions)
?OLS.REG
devtools::install_github("thezeming/MyFunctions",
ref="master",
force = TRUE)
# update documentation
devtools::document()
1<=2
1=<2
1<=2
1>=2
1=>2
`1.960`
1.960
1.2 |> as.integer()
1.5 |> as.integer()
1.9 |> as.integer()
devtools::install_github("thezeming/MyFunctions")
devtools::install_github("thezeming/MyFunctions",
force = TRUE)
# update documentation
devtools::document()
devtools::install_github("thezeming/MyFunctions")
# update documentation
devtools::document()
install.packages('devtools')
# update documentation
devtools::document()
result <- matrix(NA,
nrow = 2,
ncol = 5)
result
result |>
getElement(2)
result |>
getElement(2) |>
getElement(1)
result |>
getElement(2) |>
getElement(1) |>
getElement(2)
result |>
getElement(2) |>
getElement(1) |> class()
result <- matrix(NA_real_,
nrow = 2,
ncol = 2)
result
colnames(result) <- c('d', 'f')
rownames(result) <- c('estimates', 't')
result <- as.data.frame(result)
result
result |>
getElement(2)
result |>
getElement(2) |>
getElement(1)
result |>
getElement(2) |>
getElement(1) |>
class
result |>
getElement(2) |>
getElement(1) |>
class()
result['estimates']
result['estimates', 'd']
result['estimates', 'd'] |> class()
# update documentation
devtools::document()
devtools::install_github("thezeming/MyFunctions")
devtools::document()
devtools::install_github("thezeming/MyFunctions")
devtools::install_github("thezeming/MyFunctions")
# The packages required for writing your own package are "devtools" and "roxygen2"
# update documentation
devtools::document()
# install and attach package
#devtools::install()
#library(MyFunctions)
# installation from Github
# devtools::install_github("SOTON2947/MyFunctions",
#                         ref="master",
#                         auth_token = "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")
# devtools::install_github("thezeming/MyFunctions",
#                         ref="master")
devtools::install_github("thezeming/MyFunctions")
devtools::install_github("thezeming/MyFunctions")
devtools::install_github("thezeming/MyFunctions")
library(MyFunctions)
?assign.portfolios2
# The packages required for writing your own package are "devtools" and "roxygen2"
# update documentation
devtools::document()
devtools::install_github("thezeming/MyFunctions")
devtools::install_github("thezeming/MyFunctions")
update.packages()
data <- mpg
library(tidyverse)
library(lubridate)
data <- mpg
data <- mpg |>
group_by(cyl,
drv)
break_var <- 'hwy'
sort_var <- 'hwy'
bps = NULL
bps = NULL
n_portfolios = 2
P_prefix = 'P'
bp_prefix = 'bp'
show_bps = FALSE
bp_type = 2
GroupVars <- group_vars(data)
if (is.null(bps)) {
breakpoints_probs <- seq(0, 1, length.out = n_portfolios + 1)
} else {
breakpoints_probs <- c(0, bps, 1)
n_portfolios <- length(bps) + 1
}
breakpoints_probs
data |>
reframe(breakpoint = quantile({
{
break_var
}
},
probs = breakpoints_probs,
na.rm = TRUE,
type = bp_type)) |>
pull(breakpoint)
data |>
reframe(breakpoint = quantile({
{
break_var
}
},
probs = breakpoints_probs,
na.rm = TRUE,
type = bp_type))
data
data |>
mutate(breakpoint = quantile({
{
break_var
}
},
probs = breakpoints_probs,
na.rm = TRUE,
type = bp_type))
data |>
mutate(breakpoint = quantile(get(break_var),
probs = breakpoints_probs,
na.rm = TRUE,
type = bp_type))
breakpoints <- data |>
rowwise() |>
mutate(breakpoint = quantile({
{
break_var
}
},
probs = breakpoints_probs,
na.rm = TRUE,
type = bp_type))
1:3 |> as.tibble()
1:3 |> as.tibble() |> t()
breakpoints <- data |>
mutate(breakpoint = quantile({
{
break_var
}
},
probs = breakpoints_probs,
na.rm = TRUE,
type = bp_type) |>
as.tibble())
breakpoints <- data |>
ungroup() |>
mutate(breakpoint = quantile({
{
break_var
}
},
probs = breakpoints_probs,
na.rm = TRUE,
type = bp_type) )
breakpoints <- data |>
mutate(breakpoint = quantile({
{
break_var
}
},
probs = breakpoints_probs,
na.rm = TRUE,
type = bp_type) |>
as.list())
breakpoints <- data |>
mutate(breakpoint = {
{
break_var
}
} ~ {
quantile(.,
probs = breakpoints_probs,
na.rm = TRUE,
type = bp_type) |>
as_tibble()
}
)
is_grouped_df(data)
data <- mpg
is_grouped_df(data)
# update documentation
devtools::document()
